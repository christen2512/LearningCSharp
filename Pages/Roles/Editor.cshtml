@page "{id}"
@model EditorModel

<h5 class="bg-primary text-white text-center p-2">
    Edit Role: @Model.Role?.Name
</h5>

<form method="post">
    <input type="hidden" name="rolename" value="@Model.Role?.Name"/>
    <div asp-validation-summary="All" class="text-danger"></div>
    <h5 class="bg-secondary text-white p-2">Members</h5>
    <table class="table table-sm table-striped table-bordered">
        <thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
        <tbody>
        @if (!(await Model.Members()).Any())
        {
            <tr>
                <td colspan="3" class="text-center">No Members</td>
            </tr>
        }
        @foreach (IdentityUser user in await Model.Members())
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>
                    <button asp-route-userid="@user.Id"
                            class="btn btn-primary btn-sm"
                            type="submit">
                        Change
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <h5 class="bg-secondary text-white p-2">Non-Members</h5>
    <table class="table table-sm table-striped table-bordered">
        <thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
        <tbody>
        @if (!(await Model.NonMembers()).Any())
        {
            <tr>
                <td colspan="3" class="text-center">
                    No non-members
                </td>
            </tr>
        }
        @foreach (IdentityUser user in await Model.NonMembers())
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>
                    <button asp-route-userid="@user.Id"
                            class="btn btn-primary btn-sm"
                            type="submit">
                        Change
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</form>

<a class="btn btn-secondary" asp-page="list">Back</a>

@functions
{
    public class EditorModel(UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager) : AdminPageModel
    {
        private UserManager<IdentityUser> UserManager { get; } = userManager;
        private RoleManager<IdentityRole> RoleManager { get; } = roleManager;
        
        public IdentityRole? Role { get; set; }

        public Task<IList<IdentityUser>> Members() => 
            Role?.Name is not null ? 
                UserManager.GetUsersInRoleAsync(Role.Name) : 
                Task.FromResult(new List<IdentityUser>() as IList<IdentityUser>);

        public async Task<IEnumerable<IdentityUser>> NonMembers() =>
            UserManager.Users.ToList().Except(await Members());

        public async Task OnGetAsync(string id) =>
            Role = await RoleManager.FindByIdAsync(id);

        public async Task<IActionResult> OnPostAsync(string userid, string rolename)
        {
            Role = await RoleManager.FindByNameAsync(rolename);
            IdentityUser? user = await UserManager.FindByIdAsync(userid);
            
            if (user == null) return Page();
            
            IdentityResult result;
            if (await UserManager.IsInRoleAsync(user, rolename))
            {
                result = await UserManager.RemoveFromRoleAsync(user, rolename);
            }
            else
            {
                result = await UserManager.AddToRoleAsync(user, rolename);
            }

            if (result.Succeeded) return RedirectToPage();
                
            foreach (IdentityError err in result.Errors)
            {
                ModelState.AddModelError("", err.Description);
            }

            return Page();

        }
    }
}
