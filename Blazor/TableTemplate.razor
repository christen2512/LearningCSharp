@typeparam RowType

<link rel="stylesheet" href="errorBoundaries.css"/>

<div class="container-fluid">
    <div class="row p-2">
        <div class="col">
            <SelectFilter Title="@("Sort")"
                          Values="@SortDirectionChoices"
                          @bind-SelectedValue="SortDirectionSelection"/>
        </div>
        <div class="col">
            <ErrorBoundary>
                <ChildContent>
                    <SelectFilter Title="@("Highlight")"
                                  Values="@HighlightChoices()"
                                  @bind-SelectedValue="HighlightSelection"/>
                </ChildContent>
                <ErrorContent>
                    <h4 class="bg-danger text-white text-center h-100 p-2">
                        Inline error: Sales Selected
                    </h4>
                </ErrorContent>
                
            </ErrorBoundary>
        </div>
    </div>
</div>

<table class="table table-sm table-bordered table-striped">
    @if (Header != null)
    {
        <thead>@Header</thead>
    }
    <tbody>
    @if (RowTemplate != null)
    {
        @foreach (RowType item in SortedData())
        {
            <tr class="@IsHighlighted(item)">@RowTemplate(item)</tr>
        }
    }
    </tbody>
</table>

@code
{
    [Parameter] public RenderFragment? Header { get; set; }
    
    [Parameter] public RenderFragment<RowType>? RowTemplate { get; set; }
    
    [Parameter] public IEnumerable<RowType> RowData { get; set; } = [];
    
    [Parameter] public Func<RowType, string> Highlight { get; set; } = _ => string.Empty;
    
    [Parameter] public Func<RowType, string> SortDirection { get; set; } = _ => string.Empty;
    
    IEnumerable<string> HighlightChoices() => RowData.Select(item => Highlight(item)).Distinct();
    
    string? HighlightSelection { get; set; } 
    
    string IsHighlighted(RowType item) => Highlight(item) == HighlightSelection ? "table-dark text-white" : "";
    
    string[] SortDirectionChoices = ["Ascending", "Descending"];
    
    string SortDirectionSelection { get; set; } = "Ascending";
    
    IEnumerable<RowType> SortedData() => SortDirectionSelection == "Ascending" ? 
        RowData.OrderBy(SortDirection) : 
        RowData.OrderByDescending(SortDirection);
}
